public class LongestCommonSubstringMemo {

    // Memo table to store lengths of longest common suffixes of substrings
    private static int[][] memo;

    // Function to find longest common substring length
    public static int longestCommonSubstring(String s1, String s2) {
        int maxLen = 0;
        memo = new int[s1.length() + 1][s2.length() + 1];

        // Initialize memo with -1 to indicate uncomputed values
        for (int i = 0; i <= s1.length(); i++) {
            for (int j = 0; j <= s2.length(); j++) {
                memo[i][j] = -1;
            }
        }

        // Compute all LCSuff(i, j) and find max length
        for (int i = 1; i <= s1.length(); i++) {
            for (int j = 1; j <= s2.length(); j++) {
                longestCommonSuffix(s1, s2, i, j);
                maxLen = Math.max(maxLen, memo[i][j]);
            }
        }

        return maxLen;
    }

    // Recursive helper to compute longest common suffix length ending at s1[i-1], s2[j-1]
    private static int longestCommonSuffix(String s1, String s2, int i, int j) {
        if (i == 0 || j == 0) {
            return 0;
        }
        if (memo[i][j] != -1) {
            return memo[i][j];
        }

        if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
            memo[i][j] = 1 + longestCommonSuffix(s1, s2, i - 1, j - 1);
        } else {
            memo[i][j] = 0;
        }
        return memo[i][j];
    }

    public static void main(String[] args) {
        String s1 = "abcde";
        String s2 = "abfce";

        int result = longestCommonSubstring(s1, s2);
        System.out.println("Length of Longest Common Substring: " + result);
    }
}
